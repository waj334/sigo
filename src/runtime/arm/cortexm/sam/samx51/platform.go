package samx51

import (
	"runtime/arm/cortexm"
	"runtime/arm/cortexm/sam/chip"
)

const (
	GCLK0 = iota
	GCLK1
	GCLK2
	GCLK3
	GCLK4
	GCLK5
	GCLK6
	GCLK7

	GCLK_OSCCTRL_DFLL48     = 0
	GCLK_OSCCTRL_FDPLL0     = 1
	GCLK_OSCCTRL_FDPLL1     = 2
	GCLK_OSCCTRL_FDPLL0_32K = 3
	GCLK_OSCCTRL_FDPLL1_32K
	GCLK_SDHC0_SLOW
	GCLK_SDHC1_SLOW
	GCLK_SERCOM0_SLOW
	GCLK_SERCOM1_SLOW
	GCLK_SERCOM2_SLOW
	GCLK_SERCOM3_SLOW
	GCLK_SERCOM4_SLOW
	GCLK_SERCOM5_SLOW
	GCLK_SERCOM6_SLOW
	GCLK_SERCOM7_SLOW
	GCLK_EIC          = 4
	GCLK_FREQM_MSR    = 5
	GCLK_FREQM_REF    = 6
	GCLK_SERCOM0_CORE = 7
	GCLK_SERCOM1_CORE = 8
	GCLK_TC0          = 9
	GCLK_TC1
	GCLK_USB          = 10
	GCLK_EVSYS0       = 11
	GCLK_EVSYS1       = 12
	GCLK_EVSYS2       = 13
	GCLK_EVSYS3       = 14
	GCLK_EVSYS4       = 15
	GCLK_EVSYS5       = 16
	GCLK_EVSYS6       = 17
	GCLK_EVSYS7       = 18
	GCLK_EVSYS8       = 19
	GCLK_EVSYS9       = 20
	GCLK_EVSYS10      = 21
	GCLK_EVSYS11      = 22
	GCLK_SERCOM2_CORE = 23
	GCLK_SERCOM3_CORE = 24
	GCLK_TCC0         = 25
	GCLK_TCC1
	GCLK_TC2 = 26
	GCLK_TC3
	GCLK_CAN0 = 27
	GCLK_CAN1 = 28
	GCLK_TCC2 = 29
	GCLK_TCC3
	GCLK_TC4 = 30
	GCLK_TC5
	GCLK_PDEC         = 31
	GCLK_AC           = 32
	GCLK_CCL          = 33
	GCLK_SERCOM4_CORE = 34
	GCLK_SERCOM5_CORE = 35
	GCLK_SERCOM6_CORE = 36
	GCLK_SERCOM7_CORE = 37
	GCLK_TCC4         = 38
	GCLK_TC6          = 39
	GCLK_TC7
	GCLK_ADC0      = 40
	GCLK_ADC1      = 41
	GCLK_DAC       = 42
	GCLK_I2S0      = 43
	GCLK_I2S1      = 44
	GCLK_SDHC0     = 45
	GCLK_SDHC1     = 46
	GCLK_CM4_TRACE = 47
)

var (
	SERCOM_REF_FREQUENCY uint32 = 60_000_000
	GCLK0_FREQUENCY      uint32 = 120_000_000
)

func init() {
	cortexm.SYSTICK_FREQUENCY = GCLK0_FREQUENCY
	cortexm.NPRIORITY_BITS = 3
}

func DefaultClocks() {
	// Configure the XOSC32K oscillator
	chip.OSC32KCTRL.XOSC32K.SetCGM(chip.OSC32KCTRL_XOSC32K_REG_CGM_XT)
	chip.OSC32KCTRL.XOSC32K.SetXTALEN(true)
	chip.OSC32KCTRL.XOSC32K.SetEN32K(true)
	chip.OSC32KCTRL.XOSC32K.SetONDEMAND(false)
	chip.OSC32KCTRL.XOSC32K.SetRUNSTDBY(true)
	chip.OSC32KCTRL.XOSC32K.SetSTARTUP(chip.OSC32KCTRL_XOSC32K_REG_STARTUP_CYCLE2048)
	chip.OSC32KCTRL.XOSC32K.SetENABLE(true)

	// Wait for XOSC32K to be stable
	for !chip.OSC32KCTRL.INTFLAG.GetXOSC32KRDY() {
	}

	// Set RTC clock
	chip.OSC32KCTRL.RTCCTRL.SetRTCSEL(chip.OSC32KCTRL_RTCCTRL_REG_RTCSEL_XOSC32K)

	// Enable DFLL - 48MHz
	chip.OSCCTRL.DFLLCTRLA.SetONDEMAND(false)
	for chip.OSCCTRL.DFLLSYNC.GetENABLE() {
	}

	chip.OSCCTRL.DFLLCTRLA.SetENABLE(true)
	for chip.OSCCTRL.DFLLSYNC.GetENABLE() {
	}

	// Set up GCLK2 - 1MHz
	chip.GCLK.GENCTRL[GCLK2].SetDIV(48)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK2 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK2].SetSRC(chip.GCLK_GENCTRL_REG_SRC_DFLL)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK2 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK2].SetGENEN(true)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK2 != 0 {
	}

	// Configure the DPLL - 120MHz
	chip.GCLK.PCHCTRL[GCLK_OSCCTRL_FDPLL0].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_OSCCTRL_FDPLL0].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_OSCCTRL_FDPLL0].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK2)
	chip.GCLK.PCHCTRL[GCLK_OSCCTRL_FDPLL0].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_OSCCTRL_FDPLL0].GetCHEN() {
	}

	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLB.SetREFCLK(chip.OSCCTRL_DPLLCTRLB_REG_REFCLK_GCLK)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLB.SetLTIME(chip.OSCCTRL_DPLLCTRLB_REG_LTIME_DEFAULT)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLB.SetFILTER(chip.OSCCTRL_DPLLCTRLB_REG_FILTER_FILTER1)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLRATIO.SetLDRFRAC(0)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLRATIO.SetLDR(119)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLA.SetONDEMAND(false)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLA.SetRUNSTDBY(true)
	chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLCTRLA.SetENABLE(true)
	for !chip.OSCCTRL.DPLL[GCLK_OSCCTRL_DFLL48].DPLLSTATUS.GetCLKRDY() {
	}

	// Enable clock for the OSCCTRL
	chip.MCLK.APBAMASK.SetOSCCTRL(true)
	chip.MCLK.APBAMASK.SetGCLK(true)
	chip.MCLK.APBAMASK.SetOSC32KCTRL(true)
	chip.MCLK.APBBMASK.SetPORT(true)
	chip.MCLK.APBAMASK.SetEIC(true)

	chip.MCLK.CPUDIV.SetDIV(chip.MCLK_CPUDIV_REG_DIV_DIV1)
	for !chip.MCLK.INTFLAG.GetCKRDY() {
	}

	// GCLK0 - 120MHz
	chip.GCLK.GENCTRL[GCLK0].SetRUNSTDBY(true)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK0 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK0].SetSRC(chip.GCLK_GENCTRL_REG_SRC_DPLL0)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK0 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK0].SetDIV(1)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK0 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK0].SetDIVSEL(0)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK0 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK0].SetGENEN(true)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK0 != 0 {
	}

	// GCLK1 - 60MHz
	chip.GCLK.GENCTRL[GCLK1].SetRUNSTDBY(true)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK1 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK1].SetSRC(chip.GCLK_GENCTRL_REG_SRC_DPLL0)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK1 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK1].SetDIV(2)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK1 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK1].SetDIVSEL(0)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK1 != 0 {
	}

	chip.GCLK.GENCTRL[GCLK1].SetGENEN(true)
	for chip.GCLK.SYNCBUSY.GetGENCTRL()&chip.GCLK_SYNCBUSY_REG_GENCTRL_GCLK1 != 0 {
	}

	/*
		// Choose the clock source for PORT
		chip.GCLK.PCHCTRL[11].SetCHEN(false)
		for chip.GCLK.PCHCTRL[11].GetCHEN() {
		}

		chip.GCLK.PCHCTRL[11].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK0)
		chip.GCLK.PCHCTRL[11].SetCHEN(true)
		for !chip.GCLK.PCHCTRL[11].GetCHEN() {
		}
	*/

	// Choose the clock source for EIC
	chip.GCLK.PCHCTRL[GCLK_EIC].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_EIC].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_EIC].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK0)
	chip.GCLK.PCHCTRL[GCLK_EIC].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_EIC].GetCHEN() {
	}

	// Choose the clock source for SERCOM0
	chip.GCLK.PCHCTRL[GCLK_SERCOM0_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM0_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM0_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM0_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM0_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM1
	chip.GCLK.PCHCTRL[GCLK_SERCOM1_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM1_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM1_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM1_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM1_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM2
	chip.GCLK.PCHCTRL[GCLK_SERCOM2_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM2_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM2_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM2_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM2_CORE].GetCHEN() {
	}
	// Choose the clock source for SERCOM3
	chip.GCLK.PCHCTRL[GCLK_SERCOM3_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM3_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM3_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM3_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM3_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM4
	chip.GCLK.PCHCTRL[GCLK_SERCOM4_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM4_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM4_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM4_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM4_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM5
	chip.GCLK.PCHCTRL[GCLK_SERCOM5_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM5_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM5_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM5_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM5_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM6
	chip.GCLK.PCHCTRL[GCLK_SERCOM6_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM6_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM6_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM6_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM6_CORE].GetCHEN() {
	}

	// Choose the clock source for SERCOM7
	chip.GCLK.PCHCTRL[GCLK_SERCOM7_CORE].SetCHEN(false)
	for chip.GCLK.PCHCTRL[GCLK_SERCOM7_CORE].GetCHEN() {
	}

	chip.GCLK.PCHCTRL[GCLK_SERCOM7_CORE].SetGEN(chip.GCLK_PCHCTRL_REG_GEN_GCLK1)
	chip.GCLK.PCHCTRL[GCLK_SERCOM7_CORE].SetCHEN(true)
	for !chip.GCLK.PCHCTRL[GCLK_SERCOM7_CORE].GetCHEN() {
	}
}

func InitFPU() {
	chip.SystemControl.CPACR.SetCP10(chip.SystemControl_CPACR_REG_CP10_FULL)
	chip.SystemControl.CPACR.SetCP11(chip.SystemControl_CPACR_REG_CP11_FULL)
}
